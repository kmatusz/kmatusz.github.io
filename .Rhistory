knitr::opts_chunk$set(echo = TRUE)
which(a==3)
a<-c(1,2,3)
which(a==3)
a<-c(1,2,4)
which(a==3)
which(a==4)
quantile(c(1,2,3), 0.5)
quantile(c(1,2,3), 0.5)%>%as.numeric()
as.numeric(quantile(c(1,2,3), 0.5))
a<-c(12,3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz")
df <- read_csv("application_train.csv")
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
df <- read_csv("Train.csv")
df <- read_csv("Loan-Prediction-III-master/Train.csv")
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
df%>%summary()
df$TARGET%>%summary()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
df <- read_csv("Loan-Prediction-III-master/Train.csv")
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
df%>%summary()
df$TARGET%>%summary()
#index_head<-createDataPartition(df$TARGET, p =0.005, list = F) #experiment with p value, the more data you leave unchaged the better for the accuracy.
#df_small<-df[index_head,]
df_small<-df
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5)%>%as.numeric()))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=F)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=F)%>%as.numeric(), x))
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=T)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
dummies <- dummyVars(TARGET ~ ., data = df_small)
df_small_dum<-predict(dummies, df_small)%>%as.data.frame()
df_small_dum$TARGET<-as.factor(df_small$TARGET)
df_small<-df_small_dum
rm(df_small_dum)
index_train<-createDataPartition(df_small$TARGET, p=0.7, list=F)
training<-df_small[index_train, ]
test<-df_small[-index_train, ]
tr_cont<- trainControl(method="repeatedcv",
#add these two lines if you are using AUC as  a metric:
#summaryFunction = twoClassSummary,
#classProbs = T,
repeats=2, number=2,verboseIter = T)
model1<-train(TARGET~. , data= training,
method="gbm",
#metric="ROC",
trControl=tr_cont
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
df <- read_csv("Loan-Prediction-III-master/Train.csv")
df<-df%>%select(-Loan_ID)
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
df%>%summary()
df$TARGET%>%summary()
#index_head<-createDataPartition(df$TARGET, p =0.005, list = F) #experiment with p value, the more data you leave unchaged the better for the accuracy.
#df_small<-df[index_head,]
df_small<-df
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=T)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
dummies <- dummyVars(TARGET ~ ., data = df_small)
df_small_dum<-predict(dummies, df_small)%>%as.data.frame()
df_small_dum$TARGET<-as.factor(df_small$TARGET)
df_small<-df_small_dum
rm(df_small_dum)
index_train<-createDataPartition(df_small$TARGET, p=0.7, list=F)
training<-df_small[index_train, ]
test<-df_small[-index_train, ]
save.image("data_preprocessed.Rdata")
#load("data_preprocessed.RData")
tr_cont<- trainControl(method="repeatedcv",
#add these two lines if you are using AUC as  a metric:
#summaryFunction = twoClassSummary,
#classProbs = T,
repeats=2, number=2,verboseIter = T)
model1<-train(TARGET~. , data= training,
method="gbm",
#metric="ROC",
trControl=tr_cont
)
print(model1)
plot(model1)
varImp(model1)%>%plot()
library(gbm)
```{r}
varImp(model1)%>%plot()
model2<-train(TARGET~. , data= training,
method="glm",
#metric="ROC",
family=binomial(), #this is a parameter of glm model, to remove in other models
trControl=tr_cont
)
print(model2)
plot(model2)
model2
varImp(model2)%>%plot()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning=FALSE, message = FALSE)
df <- read_csv("Train.csv")
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
df <- read_csv("Train.csv")
df <- read_csv("Train.csv")
df <- read.csv("Train.csv")
df <- read.csv("Train.csv", stringsAsFactors = F)
df<-df%>%select(-Loan_ID)
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
