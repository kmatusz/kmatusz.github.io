knitr::opts_chunk$set(echo = TRUE)
which(a==3)
a<-c(1,2,3)
which(a==3)
a<-c(1,2,4)
which(a==3)
which(a==4)
quantile(c(1,2,3), 0.5)
quantile(c(1,2,3), 0.5)%>%as.numeric()
as.numeric(quantile(c(1,2,3), 0.5))
a<-c(12,3)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz")
df <- read_csv("application_train.csv")
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
df <- read_csv("Train.csv")
df <- read_csv("Loan-Prediction-III-master/Train.csv")
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
df%>%summary()
df$TARGET%>%summary()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
df <- read_csv("Loan-Prediction-III-master/Train.csv")
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
df%>%summary()
df$TARGET%>%summary()
#index_head<-createDataPartition(df$TARGET, p =0.005, list = F) #experiment with p value, the more data you leave unchaged the better for the accuracy.
#df_small<-df[index_head,]
df_small<-df
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5)%>%as.numeric()))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=F)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=F)%>%as.numeric(), x))
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=T)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
dummies <- dummyVars(TARGET ~ ., data = df_small)
df_small_dum<-predict(dummies, df_small)%>%as.data.frame()
df_small_dum$TARGET<-as.factor(df_small$TARGET)
df_small<-df_small_dum
rm(df_small_dum)
index_train<-createDataPartition(df_small$TARGET, p=0.7, list=F)
training<-df_small[index_train, ]
test<-df_small[-index_train, ]
tr_cont<- trainControl(method="repeatedcv",
#add these two lines if you are using AUC as  a metric:
#summaryFunction = twoClassSummary,
#classProbs = T,
repeats=2, number=2,verboseIter = T)
model1<-train(TARGET~. , data= training,
method="gbm",
#metric="ROC",
trControl=tr_cont
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
setwd("C:/Kamil/2/R wiz/Loan-Prediction-III-master")
df <- read_csv("Loan-Prediction-III-master/Train.csv")
df<-df%>%select(-Loan_ID)
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
df%>%summary()
df$TARGET%>%summary()
#index_head<-createDataPartition(df$TARGET, p =0.005, list = F) #experiment with p value, the more data you leave unchaged the better for the accuracy.
#df_small<-df[index_head,]
df_small<-df
df_small%>%
mutate_if(is.numeric,function(x) ifelse(is.na(x), quantile(x, 0.5, na.rm=T)%>%as.numeric(), x))%>%   #numeric variables
mutate_if(function(x) !is.numeric(x), function(x) ifelse(is.na(x), "na", x))->df_small
dummies <- dummyVars(TARGET ~ ., data = df_small)
df_small_dum<-predict(dummies, df_small)%>%as.data.frame()
df_small_dum$TARGET<-as.factor(df_small$TARGET)
df_small<-df_small_dum
rm(df_small_dum)
index_train<-createDataPartition(df_small$TARGET, p=0.7, list=F)
training<-df_small[index_train, ]
test<-df_small[-index_train, ]
save.image("data_preprocessed.Rdata")
#load("data_preprocessed.RData")
tr_cont<- trainControl(method="repeatedcv",
#add these two lines if you are using AUC as  a metric:
#summaryFunction = twoClassSummary,
#classProbs = T,
repeats=2, number=2,verboseIter = T)
model1<-train(TARGET~. , data= training,
method="gbm",
#metric="ROC",
trControl=tr_cont
)
print(model1)
plot(model1)
varImp(model1)%>%plot()
library(gbm)
```{r}
varImp(model1)%>%plot()
model2<-train(TARGET~. , data= training,
method="glm",
#metric="ROC",
family=binomial(), #this is a parameter of glm model, to remove in other models
trControl=tr_cont
)
print(model2)
plot(model2)
model2
varImp(model2)%>%plot()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning=FALSE, message = FALSE)
df <- read_csv("Train.csv")
library(tidyverse)
library(caTools)
library(ROCR)
library(caret)
df <- read_csv("Train.csv")
df <- read_csv("Train.csv")
df <- read.csv("Train.csv")
df <- read.csv("Train.csv", stringsAsFactors = F)
df<-df%>%select(-Loan_ID)
name_target<-"Loan_Status"
names(df)[which(names(df)==name_target)]<-"TARGET"
setwd("C:\\Users\\Kamil MatuszelaÅ„ski\\warszawa")
library(leaflet)
library(plyr)
library(rvest)
library(tidyverse)
library(jsonlite)
library(lubridate)
as.numeric(as.POSIXct("2018-07-01 2:13:46 EST"))
seq(ymd('2012-04-07'),ymd('2013-03-22'), by = '1 week')
seq(ymd('2012-04-07'),ymd('2013-03-22'), by = 'days')
seq(ymd('2018-04-07'),ymd('2018-05-22'), by = 'days')
as.POSIXct( seq(ymd('2018-04-07'),ymd('2018-05-22'), by = 'days'))
day="01"
as.POSIXct(sprintf("2018-05-%s 0:00:00 EST", day))
as.numeric(as.POSIXct(sprintf("2018-05-%s 0:00:00 EST", day)))
as.numeric(as.POSIXct(ymd('2018-05-01')))
as.numeric(as.POSIXct(ymd('2018-05-01 EST')))
as.numeric(as.POSIXct(ymd('2018-05-01 0:00:00 EST')))
as.numeric(as.POSIXct(ymd_hms('2018-05-01 0:00:00 EST')))
as.numeric(as.POSIXct(sprintf("2018-05-%s 0:00:00 EST", day)))
as.numeric(as.POSIXct(ymd_hms('2018-05-01 0:00:00 EST')))
as.POSIXct( seq(ymd('2018-05-01'),ymd('2018-05-03'), by = 'days'))
as.numeric(as.POSIXct( seq(ymd('2018-05-01'),ymd('2018-05-03'), by = 'days')))
dates<-as.numeric(as.POSIXct( seq(ymd('2018-03-01'),ymd('2018-08-31'), by = 'days')))
apikey = "840fa06b-a4ea-40ff-9d83-9d68dab180a9"
df_finish<- data.frame()
dates<-as.numeric(as.POSIXct( seq(ymd('2018-03-01'),ymd('2018-08-31'), by = 'days')))
apikey = "840fa06b-a4ea-40ff-9d83-9d68dab180a9"
df_finish<- data.frame()
i=1
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
print(http)
df = fromJSON(strona)
df=df$result
df= df$result
df= df$notifications
for (i in 1:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
print(http)
df = fromJSON(strona)
df=df$result
df= df$result
df= df$notifications
df_finish<-rbind.fill(df_finish, df)
print(paste0(i, "obserwacje: ", length(df)))
Sys.sleep(2)
}
df
length(df)
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
i=1
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df[[result]]
df[['result']]
df[['result']][['result']][['notifications']]
for (i in 1:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 1:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 69:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 69:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 137:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 154:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 154:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 156:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
for (i in 157:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 158:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http, timeout=200)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 158:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 163:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 164:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
for (i in 167:(length(dates)-1)){
from = dates[i]
to = dates[i+1]
http = sprintf("https://api.um.warszawa.pl/api/action/19115store_getNotificationsForDate/?id=28dc65ad-fff5-447b-99a3-95b71b4a7d1e&dateFrom=%s000&dateTo=%s000&apikey=%s"
, from, to, apikey)
strona = readLines(http)
df = fromJSON(strona)
df=df[['result']][['result']][['notifications']]
if (length(df)!=0)  df_finish<-rbind.fill(df_finish, df)
print(paste0(i, " obserwacje: ", nrow(df)))
Sys.sleep(2)
}
dates[i]
